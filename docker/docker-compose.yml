volumes:
  ecommerce-microservices:
networks:
  ecommerce-microservices-network:
    driver: bridge

services:
  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ecommerce-microservices:/var/lib/postgresql/data
    networks:
      - ecommerce-microservices-network
  config-service:
    build:
      context: ../config-service
      dockerfile: ../config-service/Dockerfile
    container_name: config-service
    depends_on:
      - postgres
    ports:
      - "${CONFIG_SERVICE_PORT}:8888"
    volumes:
      - ecommerce-microservices:/var/lib/config-service/data
    networks:
      - ecommerce-microservices-network
    healthcheck:
      test: "curl --fail --silent http://localhost:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
  product-service:
    build:
      context: ../product-service
      dockerfile: ../product-service/Dockerfile
    depends_on:
      config-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_CONFIG_IMPORT=configserver:http://config-service:8888
    container_name: product-service
    ports:
      - "${PRODUCT_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/product-service/data
    networks:
      - ecommerce-microservices-network