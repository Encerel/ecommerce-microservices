volumes:
  ecommerce-microservices:
networks:
  ecommerce-microservices-network:
    driver: bridge

services:
  product-postgres:
    image: postgres:17
    container_name: product-postgres
    ports:
      - "${PRODUCT_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
    volumes:
      - ecommerce-microservices:/var/lib/product-postgresql/data
    networks:
      - ecommerce-microservices-network

  order-postgres:
    image: postgres:17
    container_name: order-postgres
    ports:
      - "${ORDER_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
    volumes:
      - ecommerce-microservices:/var/lib/order-postgresql/data
    networks:
      - ecommerce-microservices-network

  inventory-postgres:
    image: postgres:17
    container_name: inventory-postgres
    ports:
      - "${INVENTORY_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${INVENTORY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INVENTORY_POSTGRES_PASSWORD}
      POSTGRES_DB: ${INVENTORY_POSTGRES_DB}
    volumes:
      - ecommerce-microservices:/var/lib/inventory-postgresql/data
    networks:
      - ecommerce-microservices-network


  config-service:
    build:
      context: ../config-service
      dockerfile: ../config-service/Dockerfile
    container_name: config-service
    depends_on:
      - product-postgres
      - order-postgres
      - inventory-postgres
    environment:
      - ENCRYPT_KEY={CONFIG_SERVICE_ENCRYPT_KEY}
    ports:
      - "${CONFIG_SERVICE_PORT}:8888"
    volumes:
      - ecommerce-microservices:/var/lib/config-service/data
    networks:
      - ecommerce-microservices-network
    healthcheck:
      test: "curl --fail --silent http://localhost:${CONFIG_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  discovery-service:
    build:
      context: ../discovery-service
      dockerfile: ../discovery-service/Dockerfile
    container_name: discovery-service
    depends_on:
      config-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${DISCOVERY_SERVICE_PORT}:8070"
    volumes:
      - ecommerce-microservices:/var/lib/discovery-service/data
    networks:
      - ecommerce-microservices-network

    healthcheck:
      test: "curl --fail --silent http://localhost:${DISCOVERY_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  gateway-service:
    build:
      context: ../gateway-service
      dockerfile: ../gateway-service/Dockerfile
    container_name: gateway-service
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${GATEWAY_SERVICE_PORT}:1000"
    volumes:
      - ecommerce-microservices:/var/lib/gateway-service/data
    networks:
      - ecommerce-microservices-network

    healthcheck:
      test: "curl --fail --silent http://localhost:${GATEWAY_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s


  product-service:
    build:
      context: ../product-service
      dockerfile: ../product-service/Dockerfile
    container_name: product-service
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${PRODUCT_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/product-service/data
    networks:
      - ecommerce-microservices-network


  order-service:
    build:
      context: ../order-service
      dockerfile: ../order-service/Dockerfile
    container_name: order-service
    depends_on:
      gateway-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=order-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${ORDER_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/order-service/data
    networks:
      - ecommerce-microservices-network

  inventory-service:
    build:
      context: ../inventory-service
      dockerfile: ../inventory-service/Dockerfile
    container_name: inventory-service
    depends_on:
      gateway-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=inventory-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${INVENTORY_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/inventory-service/data
    networks:
      - ecommerce-microservices-network