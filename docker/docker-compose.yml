volumes:
  ecommerce-microservices:
  product-postgres-data:
  order-postgres-data:
  inventory-postgres-data:
  keycloak-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:


networks:
  ecommerce-microservices-network:
    driver: bridge

services:
  product-postgres:
    image: postgres:17
    container_name: product-postgres
    ports:
      - "${PRODUCT_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
    volumes:
      - product-postgres-data:/var/lib/product-postgresql/data
    networks:
      - ecommerce-microservices-network

  order-postgres:
    image: postgres:17
    container_name: order-postgres
    ports:
      - "${ORDER_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
    volumes:
      - order-postgres-data:/var/lib/order-postgresql/data
    networks:
      - ecommerce-microservices-network

  inventory-postgres:
    image: postgres:17
    container_name: inventory-postgres
    ports:
      - "${INVENTORY_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${INVENTORY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INVENTORY_POSTGRES_PASSWORD}
      POSTGRES_DB: ${INVENTORY_POSTGRES_DB}
    volumes:
      - inventory-postgres-data:/var/lib/inventory-postgresql/data
    networks:
      - ecommerce-microservices-network

  config-service:
    build:
      context: ../config-service
      dockerfile: ../config-service/Dockerfile
    container_name: config-service
    depends_on:
      - product-postgres
      - order-postgres
      - inventory-postgres
    environment:
      - ENCRYPT_KEY={CONFIG_SERVICE_ENCRYPT_KEY}
    ports:
      - "${CONFIG_SERVICE_PORT}:8888"
    volumes:
      - ecommerce-microservices:/var/lib/config-service/data
    networks:
      - ecommerce-microservices-network
    healthcheck:
      test: "curl --fail --silent http://localhost:${CONFIG_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  discovery-service:
    build:
      context: ../discovery-service
      dockerfile: ../discovery-service/Dockerfile
    container_name: discovery-service
    depends_on:
      config-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${DISCOVERY_SERVICE_PORT}:8070"
    volumes:
      - ecommerce-microservices:/var/lib/discovery-service/data
    networks:
      - ecommerce-microservices-network

    healthcheck:
      test: "curl --fail --silent http://localhost:${DISCOVERY_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  gateway-service:
    build:
      context: ../gateway-service
      dockerfile: ../gateway-service/Dockerfile
    container_name: gateway-service
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${GATEWAY_SERVICE_PORT}:1000"
    volumes:
      - ecommerce-microservices:/var/lib/gateway-service/data
    networks:
      - ecommerce-microservices-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: keycloak
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    ports:
      - "${KEYCLOAK_PORT}:8080"
    command:
      - "start-dev"
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks:
      - ecommerce-microservices-network

  kafka-1:
    build:
      context: kafka
      dockerfile: Dockerfile
    container_name: kafka-1
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091, 2@kafka-2:9091, 3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    ports:
      - "9092:9092"
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - ecommerce-microservices-network

  kafka-2:
    build:
      context: kafka
      dockerfile: Dockerfile
    image: bitnami/kafka:3.9.0
    container_name: kafka-2
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091, 2@kafka-2:9091, 3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    ports:
      - "9094:9094"
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - ecommerce-microservices-network

  kafka-3:
    build:
      context: kafka
      dockerfile: Dockerfile
    image: bitnami/kafka:3.9.0
    container_name: kafka-3
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=PVjHlx7ESeesq55jeB6Efw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091, 2@kafka-2:9091, 3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9090,EXTERNAL://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    ports:
      - "9096:9096"
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - ecommerce-microservices-network
  product-service:
    build:
      context: ../product-service
      dockerfile: ../product-service/Dockerfile
    container_name: product-service
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${PRODUCT_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/product-service/data
    networks:
      - ecommerce-microservices-network


  order-service:
    build:
      context: ../order-service
      dockerfile: ../order-service/Dockerfile
    container_name: order-service
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=order-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${ORDER_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/order-service/data
    networks:
      - ecommerce-microservices-network

  inventory-service:
    build:
      context: ../inventory-service
      dockerfile: ../inventory-service/Dockerfile
    container_name: inventory-service
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=inventory-service
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${INVENTORY_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/inventory-service/data
    networks:
      - ecommerce-microservices-network

  notification-service:
    build:
      context: ../notification-service
      dockerfile: ../notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:8080"
    volumes:
      - ecommerce-microservices:/var/lib/notification-service/data
    networks:
      - ecommerce-microservices-network